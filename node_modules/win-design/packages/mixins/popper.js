import Popper from 'popper.js'

export default {
  data () {
    return {
      showPopper: false,
      currentPlacement: '',
      currentOffset: () => 0
    }
  },
  props: {
    appendToBody: {
      type: Boolean,
      default: true
    },
    placement: {
      type: String,
      default: 'bottom-start'
    },
    offset: {}
  },
  methods: {
    togglePopover () {
      this.showPopper = !this.showPopper
    },
    showPopover () {
      clearTimeout(this._timeout)
      this.showPopper = true
    },
    hiddenPopover () {
      clearTimeout(this._timeout)
      this._timeout = setTimeout(() => {
        this.showPopper = false
      }, 200)
    },
    createPopper () {
      const placement = this.currentPlacement || this.placement
      // validate placement
      if (!/^(top|right|bottom|left)(-start|-end)?$/g.test(placement)) return
      // 兼容datePicker
      const reference = this.referenceElement = this.referenceElement || this.reference || this.$refs.reference
      const popper = this.popperElement = this.popperElm || this.$refs.popper
      if (!reference || !popper) return
      // create arrow
      this.visibleArrow && this.createArrow(popper)
      // append to body
      this.appendToBody && document.body.appendChild(popper)
      // destroy old popper instance
      this.popperJs && this.popperJs.destroy && this.popperJs.destroy()
      // init popperJs
      this.popperJs = new Popper(reference, popper, {
        placement,
        modifiers: {
          offset: {
            offset: this.currentOffset() || this.offset || 0
          },
          computeStyle: {
            gpuAcceleration: false
          }
        }
      })
      popper.addEventListener('click', (e) => e.stopPropagation())
    },
    updatePopper () {
      // 新增
      this.createPopper()
    },
    createArrow (popper) {
      if (this.arrowCreated) return
      this.arrowCreated = true
      const arrow = document.createElement('div')
      arrow.setAttribute('x-arrow', '')
      arrow.className = 'popper__arrow'
      popper.appendChild(arrow)
    },
    resetPopoverTransformOrigin () {
      if (!this.popperJs) return
      const placementMap = {
        top: 'bottom',
        right: 'left',
        bottom: 'top',
        left: 'right'
      }
      let {popper} = this.popperJs
      const placement = popper.getAttribute('x-placement').split('-')[0]
      const origin = placementMap[placement]
      popper.style.transformOrigin = ['top', 'bottom'].indexOf(placement) > -1 ? `center ${origin}` : `${origin} center`
    },
    destroyPopper () {
      if (!this.showPopper || !this.popperJs) return
      this.popperJs.destroy()
      this.popperJs = null
    }
  },
  beforeDestroy () {
    this.destroyPopper()
    if (this.popperElement && this.popperElement.parentNode === document.body) {
      this.popperElement.removeEventListener('click', (e) => e.stopPropagation())
      document.body.removeChild(this.popperElement)
    }
  },
  watch: {
    showPopper (val) {
      this.$nextTick(() => {
        val ? this.createPopper() : this.resetPopoverTransformOrigin()
      })
    }
  }
}
